//C# Abstract Syntax Interface generated by the BNF Converter.
using System;
using System.Collections.Generic;
namespace CSPGF.trees.Absyn
{
  #region Token Classes
  public class TokenBaseType
  {
    private string str;
    
    public TokenBaseType(string str)
    {
      this.str = str;
    }
    
    public override string ToString()
    {
      return this.str;
    }
  }
  
  #endregion
  
  #region Abstract Syntax Classes
  public abstract class Tree
  {
    public abstract R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(CSPGF.trees.Absyn.Lambda p, A arg);
      R Visit(CSPGF.trees.Absyn.Variable p, A arg);
      R Visit(CSPGF.trees.Absyn.Application p, A arg);
      R Visit(CSPGF.trees.Absyn.Literal p, A arg);
      R Visit(CSPGF.trees.Absyn.MetaVariable p, A arg);
      R Visit(CSPGF.trees.Absyn.Function p, A arg);
    }
  }
 
  public abstract class Lit
  {
    public abstract R Accept<R,A>(CSPGF.trees.Absyn.Lit.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(CSPGF.trees.Absyn.IntLiteral p, A arg);
      R Visit(CSPGF.trees.Absyn.FloatLiteral p, A arg);
      R Visit(CSPGF.trees.Absyn.StringLiteral p, A arg);
    }
  }
  
  public class Lambda : CSPGF.trees.Absyn.Tree
  {
    private string ident_;
    private CSPGF.trees.Absyn.Tree tree_;

    public Lambda(string p1, CSPGF.trees.Absyn.Tree p2)
    {
      ident_ = p1;
      tree_ = p2;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public CSPGF.trees.Absyn.Tree Tree_
    {
      get
      {
        return this.tree_;
      }
      set
      {
        this.tree_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.Lambda)
      {
        return this.Equals((CSPGF.trees.Absyn.Lambda)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.Lambda obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_) && this.Tree_.Equals(obj.Tree_);
    }
    
    public override int GetHashCode()
    {
      return 37*(this.Ident_.GetHashCode())+this.Tree_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Variable : CSPGF.trees.Absyn.Tree
  {
    private int integer_;

    public Variable(int p1)
    {
      integer_ = p1;
    }
    
    public int Integer_
    {
      get
      {
        return this.integer_;
      }
      set
      {
        this.integer_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.Variable)
      {
        return this.Equals((CSPGF.trees.Absyn.Variable)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.Variable obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Application : CSPGF.trees.Absyn.Tree
  {
    private CSPGF.trees.Absyn.Tree tree_1;
    private CSPGF.trees.Absyn.Tree tree_2;

    public Application(CSPGF.trees.Absyn.Tree p1, CSPGF.trees.Absyn.Tree p2)
    {
      tree_1 = p1;
      tree_2 = p2;
    }
    
    public CSPGF.trees.Absyn.Tree Tree_1
    {
      get
      {
        return this.tree_1;
      }
      set
      {
        this.tree_1 = value;
      }
    }
    
    public CSPGF.trees.Absyn.Tree Tree_2
    {
      get
      {
        return this.tree_2;
      }
      set
      {
        this.tree_2 = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.Application)
      {
        return this.Equals((CSPGF.trees.Absyn.Application)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.Application obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Tree_1.Equals(obj.Tree_1) && this.Tree_2.Equals(obj.Tree_2);
    }
    
    public override int GetHashCode()
    {
      return 37*(this.Tree_1.GetHashCode())+this.Tree_2.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Literal : CSPGF.trees.Absyn.Tree
  {
    private CSPGF.trees.Absyn.Lit lit_;

    public Literal(CSPGF.trees.Absyn.Lit p1)
    {
      lit_ = p1;
    }
    
    public CSPGF.trees.Absyn.Lit Lit_
    {
      get
      {
        return this.lit_;
      }
      set
      {
        this.lit_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.Literal)
      {
        return this.Equals((CSPGF.trees.Absyn.Literal)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.Literal obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Lit_.Equals(obj.Lit_);
    }
    
    public override int GetHashCode()
    {
      return this.Lit_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MetaVariable : CSPGF.trees.Absyn.Tree
  {
    private int integer_;

    public MetaVariable(int p1)
    {
      integer_ = p1;
    }
    
    public int Integer_
    {
      get
      {
        return this.integer_;
      }
      set
      {
        this.integer_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.MetaVariable)
      {
        return this.Equals((CSPGF.trees.Absyn.MetaVariable)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.MetaVariable obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Function : CSPGF.trees.Absyn.Tree
  {
    private string ident_;

    public Function(string p1)
    {
      ident_ = p1;
    }
    
    public string Ident_
    {
      get
      {
        return this.ident_;
      }
      set
      {
        this.ident_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.Function)
      {
        return this.Equals((CSPGF.trees.Absyn.Function)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.Function obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Ident_.Equals(obj.Ident_);
    }
    
    public override int GetHashCode()
    {
      return this.Ident_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class IntLiteral : CSPGF.trees.Absyn.Lit
  {
    private int integer_;

    public IntLiteral(int p1)
    {
      integer_ = p1;
    }
    
    public int Integer_
    {
      get
      {
        return this.integer_;
      }
      set
      {
        this.integer_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.IntLiteral)
      {
        return this.Equals((CSPGF.trees.Absyn.IntLiteral)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.IntLiteral obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class FloatLiteral : CSPGF.trees.Absyn.Lit
  {
    private double double_;

    public FloatLiteral(double p1)
    {
      double_ = p1;
    }
    
    public double Double_
    {
      get
      {
        return this.double_;
      }
      set
      {
        this.double_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.FloatLiteral)
      {
        return this.Equals((CSPGF.trees.Absyn.FloatLiteral)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.FloatLiteral obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.Double_.Equals(obj.Double_);
    }
    
    public override int GetHashCode()
    {
      return this.Double_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class StringLiteral : CSPGF.trees.Absyn.Lit
  {
    private string string_;

    public StringLiteral(string p1)
    {
      string_ = p1;
    }
    
    public string String_
    {
      get
      {
        return this.string_;
      }
      set
      {
        this.string_ = value;
      }
    }
    
    public override bool Equals(Object obj)
    {
      if(this == obj)
      {
        return true;
      }
      if(obj is CSPGF.trees.Absyn.StringLiteral)
      {
        return this.Equals((CSPGF.trees.Absyn.StringLiteral)obj);
      }
      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.trees.Absyn.StringLiteral obj)
    {
      if(this == obj)
      {
        return true;
      }
      return this.String_.Equals(obj.String_);
    }
    
    public override int GetHashCode()
    {
      return this.String_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
  
  #region Lists
  #endregion
  #endregion
}
//C# Abstract Syntax Interface generated by the BNF Converter.
namespace CSPGF.Trees.Absyn
{
    using System;
    using System.Collections.Generic;

  #region Token Classes
  public class TokenBaseType
  {
    private string str;
    
    public TokenBaseType(string str)
    {
      this.str = str;
    }
    
    public override string ToString()
    {
      return this.str;
    }
  }
  
  #endregion
  
  #region Abstract Syntax Classes
  public abstract class Tree
  {
    public abstract R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(CSPGF.Trees.Absyn.Lambda p, A arg);

      R Visit(CSPGF.Trees.Absyn.Variable p, A arg);

      R Visit(CSPGF.Trees.Absyn.Application p, A arg);

      R Visit(CSPGF.Trees.Absyn.Literal p, A arg);

      R Visit(CSPGF.Trees.Absyn.MetaVariable p, A arg);

      R Visit(CSPGF.Trees.Absyn.Function p, A arg);
    }
  }
 
  public abstract class Lit
  {
    public abstract R Accept<R,A>(CSPGF.Trees.Absyn.Lit.Visitor<R,A> v, A arg);
    
    public interface Visitor<R,A>
    {
      R Visit(CSPGF.Trees.Absyn.IntLiteral p, A arg);
      R Visit(CSPGF.Trees.Absyn.FloatLiteral p, A arg);
      R Visit(CSPGF.Trees.Absyn.StringLiteral p, A arg);
    }
  }
  
  public class Lambda : CSPGF.Trees.Absyn.Tree
  {
      public Lambda(string p1, CSPGF.Trees.Absyn.Tree p2)
    {
      Ident_ = p1;
      Tree_ = p2;
    }

      public string Ident_ { get; set; }

      public Tree Tree_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.Lambda)
      {
        return this.Equals((CSPGF.Trees.Absyn.Lambda)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.Lambda obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Ident_.Equals(obj.Ident_) && this.Tree_.Equals(obj.Tree_);
    }
    
    public override int GetHashCode()
    {
      return 37*this.Ident_.GetHashCode()+this.Tree_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Variable : CSPGF.Trees.Absyn.Tree
  {
      public Variable(int p1)
    {
      Integer_ = p1;
    }

      public int Integer_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.Variable)
      {
        return this.Equals((CSPGF.Trees.Absyn.Variable)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.Variable obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Application : CSPGF.Trees.Absyn.Tree
  {
      public Application(CSPGF.Trees.Absyn.Tree p1, CSPGF.Trees.Absyn.Tree p2)
    {
      Tree_1 = p1;
      Tree_2 = p2;
    }

      public Tree Tree_1 { get; set; }

      public Tree Tree_2 { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.Application)
      {
        return this.Equals((CSPGF.Trees.Absyn.Application)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.Application obj)
    {
      if (this == obj)
      {
        return true;
      }
      return this.Tree_1.Equals(obj.Tree_1) && this.Tree_2.Equals(obj.Tree_2);
    }
    
    public override int GetHashCode()
    {
      return 37*this.Tree_1.GetHashCode()+this.Tree_2.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Literal : CSPGF.Trees.Absyn.Tree
  {
      public Literal(CSPGF.Trees.Absyn.Lit p1)
    {
      Lit_ = p1;
    }

      public Lit Lit_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.Literal)
      {
        return this.Equals((CSPGF.Trees.Absyn.Literal)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.Literal obj)
    {
      if (this == obj)
      {
        return true;
      }
      return this.Lit_.Equals(obj.Lit_);
    }
    
    public override int GetHashCode()
    {
      return this.Lit_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class MetaVariable : CSPGF.Trees.Absyn.Tree
  {
      public MetaVariable(int p1)
    {
      Integer_ = p1;
    }

      public int Integer_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.MetaVariable)
      {
        return this.Equals((CSPGF.Trees.Absyn.MetaVariable)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.MetaVariable obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class Function : CSPGF.Trees.Absyn.Tree
  {
      public Function(string p1)
    {
      Ident_ = p1;
    }

      public string Ident_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.Function)
      {
        return this.Equals((CSPGF.Trees.Absyn.Function)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.Function obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Ident_.Equals(obj.Ident_);
    }
    
    public override int GetHashCode()
    {
      return this.Ident_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Tree.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class IntLiteral : CSPGF.Trees.Absyn.Lit
  {
      public IntLiteral(int p1)
    {
      Integer_ = p1;
    }

      public int Integer_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.IntLiteral)
      {
        return this.Equals((CSPGF.Trees.Absyn.IntLiteral)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.IntLiteral obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Integer_.Equals(obj.Integer_);
    }
    
    public override int GetHashCode()
    {
      return this.Integer_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class FloatLiteral : CSPGF.Trees.Absyn.Lit
  {
      public FloatLiteral(double p1)
    {
      Double_ = p1;
    }

      public double Double_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.FloatLiteral)
      {
        return this.Equals((CSPGF.Trees.Absyn.FloatLiteral)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.FloatLiteral obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.Double_.Equals(obj.Double_);
    }
    
    public override int GetHashCode()
    {
      return this.Double_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
 
  public class StringLiteral : CSPGF.Trees.Absyn.Lit
  {
      public StringLiteral(string p1)
    {
      String_ = p1;
    }

      public string String_ { get; set; }

      public override bool Equals(object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj is CSPGF.Trees.Absyn.StringLiteral)
      {
        return this.Equals((CSPGF.Trees.Absyn.StringLiteral)obj);
      }

      return base.Equals(obj);
    }
    
    public bool Equals(CSPGF.Trees.Absyn.StringLiteral obj)
    {
      if (this == obj)
      {
        return true;
      }

      return this.String_.Equals(obj.String_);
    }
    
    public override int GetHashCode()
    {
      return this.String_.GetHashCode();
    }
    
    public override R Accept<R,A>(CSPGF.Trees.Absyn.Lit.Visitor<R,A> visitor, A arg)
    {
      return visitor.Visit(this, arg);
    }
  }
  
  #region Lists
  #endregion
  #endregion
}